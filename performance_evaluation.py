"""
시간 복잡도 : 특정한 크기의 입력에 대하여 알고리즘의 수행 시간 분석
공간 복잡도 : 특정한 크기의 입력에 대하여 알고리즘의 메모리 사용량 분석
빅오 표기버 (Big-O Notation)
가장 빠르게 증가하는 항만을 고려하는 표기법
함수의 상한만을 나타냄
예를 들어 연산 횟수가 3N^3 + 5N^2 + 1,000,000안 알고리즘이 있으면
빅오 표기법에서는 차수가 가장 큰 항만 남기므로 O(N^3)으로 표현됩니다.

## 알고리즘 설계 Tip

- 일반적으로 CPU 기반의 개인 컴퓨터나 채점용 컴퓨터에서 연산 횟수가 5억을 넘어가는 경우 :
    - C언어를 기준으로 통상 1 ~ 3초 가량의 시간이 소요됩니다.
    - Python을 기준으로 통상 5 ~ 15초 가량의 시간이 소요됩니다.
        - PyPy의 경우 때때 로 C언어보다도 빠르게 동작하기도 합니다.
- O(N^3)의 알고리즘을 설계한 경우, N의 값이 5,000이 넘는다면 얼마나 걸릴까요?
- **코딩 테스트 문제에서 시간제한은 통상 1  ~ 5초 가량**이라는 점에 유의하세요
    - 혹여 문제에 명시되어 있지 않은 경우 대략 5초 정도라고 생각하고 문제를 푸는 것이 합리적

### 요구사항에 따라 적절한 알고리즘 설계하기

- 문제에서 가장 먼저 확인해야 하는 내용은 시간제한**(수행시간 요구사항)** 입니다.
- **시간제한이 1초인 문제**를 만났을 때, 일반적인 기준을 다음과 같습니다.
    - N의 범위가 500인 경우 : 시간 복잡도 O(N^3)인 알고리즘
    - N의 범위가 2,000인 경우 : 시간 복잡도 O(N^2)인 알고리즘
    - N의 범위가 100,000인 경우 : 시간 복잡도 O(NlogN)인 알고리즘
    - N의 범위가 10,000,000인 경우 : 시간 복잡도 O(N)인 알고리즘

### 알고리즘 문제 해결 과정

- 일반적인 알고리즘 문제 해결 과정은 다음과 같습니다
    1. 지문 읽기 및 컴퓨터적 사고
    2. 요구사항(복잡도) 분석
    3. 문제 해결을 위한 아이디어 찾기
    4. 소스코드 설계 및 코딩
- 일반 적으로 대부분의 문제 출제자들은 핵심 아이디어를 캐치한다면, 간결하게 소스코드를 작성할 수 있는 형태로 문제를 출제

*****빅오 표기법*****

        순위      명칭
    좋음 O(1)     상수시간(Constant time)
        O(logN)  로그시간(Log time)
        O(N)     선형 시간
        O(NlogN) 로그 선형 시간
        O(N^2)   이차 시간
        O(N^3)   삼차 시간
    나쁨 O(2")    지수 시간

"""

# N개의 데이터의 합을 계산하는 프로그램 예제
array = [3, 5, 1, 2, 4]  # 5개의 데이터 (N=5)
summary = 0  # 합계를 저장할 변수

# 데이터의 합을 계산하는 반복문
for x in array:
    summary += x

#결과 출력
print(f"summary = {summary}")

# 수행 시간은 데이터의 개수 N에 비례할 것임을 예측할 수 있습니다.
# - 시간 복잡도 : O(N)

# ------------------------------------------------
# 2중 반복문을 이용하는 프로그램 예제
array = [3, 5, 1, 2, 4]  # 5개의 데이터 (N=5)

for i in array:
    for j in array:
        temp = i * j
        print(f"temp = {temp}")
# 시간 복잡도 : O(N^2)
# 참고로 모든 2중 반복문의 시간 복잡도가 O(N^2)인 것은 아닙니다.
# 소스 코드가 내부적으로 다른 함수를 호출 한다면 그 함수의 시간 복잡도 까지 고려 해야합니다.

# --------------------------------------------

# 일반적인 알고리즘 문제 해결 과정
import time

start_time = time.time()  # 알고리즘 시작 시간

#프로그램 소스코드
end_time = time.time()  # 알고리즘 종료 시간
print("time:", end_time - start_time)  #수행 시간 출력
